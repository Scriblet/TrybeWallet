{"version":3,"sources":["img/logo.webp","services/API.js","actions/index.js","actions/actionTypes.js","pages/Login.jsx","components/Form.jsx","components/WalletTable.jsx","components/EditForm.jsx","pages/Wallet.jsx","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","fetchCurrency","a","fetch","request","json","response","buttonExpenses","expense","type","toggleForm","editingExpense","id","edit","currentId","Login","eventHandle","bind","validInputs","redirectWallet","state","email","password","target","value","name","this","setState","test","length","props","history","emailText","push","style","margin","Group","controlId","Label","Control","data-testid","onChange","Button","disabled","onClick","React","Component","connect","user","dispatch","payload","loginButton","Form","handleChange","buttonClick","methodOptions","tagOptions","description","currency","method","tag","getCurrenciesDispatch","e","previuosState","buttonExpensesDispatch","currenciesState","htmlFor","as","className","selected","map","c","key","m","t","variant","wallet","currencies","data","currenciesL","Object","keys","currencyList","filter","element","rates","ex","WalletTable","currentExpense","expensesState","exchangeRates","currentCurrency","parseFloat","ask","toFixed","newValue","deleteRowDispatch","toggleFormDispatch","Table","striped","hover","filterName","filterExchange","convertedValue","size","deleteRow","expenses","excludedRow","status","EditForm","editExpensesDispatch","editId","idExpense","editExpense","Wallet","reduce","acc","cur","typeForm","console","log","color","fontFamily","padding","src","logo","alt","totalValue","App","exact","path","component","Boolean","window","location","hostname","match","initialState","action","nextId","index","currentExpenses","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b9e1344.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.17fb69ad.webp\";","const fetchCurrency = async () => {\r\n  const URL = 'https://economia.awesomeapi.com.br/json/all';\r\n  const request = await fetch(URL);\r\n  const response = await request.json();\r\n  return response;\r\n};\r\n\r\nexport default fetchCurrency;\r\n","// Coloque aqui suas actions\r\nimport {\r\n  CLICK_UPDATE_EMAIL_VALUE,\r\n  CURRENCY_UPDATE_VALUE,\r\n  EXPENSES_UPDATE_VALUE,\r\n  EXPENSES_DELETE_VALUE,\r\n  EXPENSES_ADD_VALUE,\r\n  TOGGLE_FORMS,\r\n} from './actionTypes';\r\nimport fetchCurrency from '../services/API';\r\n\r\nexport const loginButton = (email) => ({\r\n  type: CLICK_UPDATE_EMAIL_VALUE,\r\n  payload: email,\r\n});\r\n\r\nexport const walletCurrency = (currency, rates) => ({\r\n  type: CURRENCY_UPDATE_VALUE,\r\n  currencies: currency,\r\n  rates,\r\n});\r\n\r\nexport const buttonExpenses = (expense) => ({\r\n  type: EXPENSES_ADD_VALUE,\r\n  expense,\r\n});\r\n\r\nexport const editExpenses = (idExpense, editExpense) => ({\r\n  type: EXPENSES_UPDATE_VALUE,\r\n  idExpense,\r\n  editExpense,\r\n});\r\n\r\nexport const excludesRow = (id) => ({\r\n  type: EXPENSES_DELETE_VALUE,\r\n  id,\r\n});\r\n\r\nexport const toggleForm = (editingExpense, id) => ({\r\n  type: TOGGLE_FORMS,\r\n  edit: editingExpense,\r\n  currentId: id,\r\n});\r\n\r\nexport const getCurrencies = () => async (dispatch) => {\r\n  const data = await fetchCurrency();\r\n  const currenciesL = Object.keys(data);\r\n  const currencyList = currenciesL.filter((element) => element !== 'USDT');\r\n  dispatch(walletCurrency(currencyList, data));\r\n};\r\n","export const EXPENSES_UPDATE_VALUE = 'EXPENSES_UPDATE_VALUE';\r\nexport const EXPENSES_ADD_VALUE = 'EXPENSES_ADD_VALUE';\r\nexport const EXPENSES_DELETE_VALUE = 'EXPENSES_DELETE_VALUE';\r\nexport const CLICK_UPDATE_EMAIL_VALUE = 'CLICK_UPDATE_EMAIL_VALUE';\r\nexport const CURRENCY_UPDATE_VALUE = 'CURRENCY_UPDATE_VALUE';\r\nexport const TOGGLE_FORMS = 'TOGGLE_FORMS';\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Form, Button } from 'react-bootstrap';\nimport { loginButton } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.eventHandle = this.eventHandle.bind(this);\n    this.validInputs = this.validInputs.bind(this);\n    this.redirectWallet = this.redirectWallet.bind(this);\n\n    this.state = {\n      email: '',\n      password: '',\n    };\n  }\n\n  eventHandle({ target }) {\n    const { value, name } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  validInputs() {\n    const { email, password } = this.state;\n    const six = 6;\n    const re = /^((?!\\.)[\\w-_.]*[^.])(@\\w+)(\\.\\w+(\\.\\w+)?[^.\\W])$/gm;\n    return re.test(email) && password.length >= six;\n  }\n\n  redirectWallet() {\n    const { email } = this.state;\n    const { history, emailText } = this.props;\n    history.push('/carteira');\n    emailText(email);\n  }\n\n  render() {\n    const { email, password } = this.state;\n    return (\n      <Form style={ { margin: '32px' } }>\n        <h1>Login Page</h1>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>\n            Email\n            <Form.Control\n              type=\"email\"\n              data-testid=\"email-input\"\n              name=\"email\"\n              value={ email }\n              onChange={ this.eventHandle }\n            />\n          </Form.Label>\n        </Form.Group>\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>\n            Password\n            <Form.Control\n              type=\"password\"\n              data-testid=\"password-input\"\n              name=\"password\"\n              value={ password }\n              onChange={ this.eventHandle }\n            />\n          </Form.Label>\n        </Form.Group>\n        <Button\n          type=\"button\"\n          disabled={ !this.validInputs() }\n          onClick={ this.redirectWallet }\n        >\n          Entrar\n        </Button>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  emailText: (email) => dispatch(loginButton(email)),\n});\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  emailText: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Form as Forms, Button } from 'react-bootstrap';\nimport { getCurrencies, buttonExpenses } from '../actions';\n\nclass Form extends React.Component {\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n    this.buttonClick = this.buttonClick.bind(this);\n\n    this.state = {\n      methodOptions: ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'],\n      tagOptions: ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'],\n      expense: {\n        value: '',\n        description: '',\n        currency: '',\n        method: '',\n        tag: '',\n      },\n    };\n  }\n\n  async componentDidMount() {\n    const { getCurrenciesDispatch } = this.props;\n    await getCurrenciesDispatch();\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState((previuosState) => ({\n      expense: { ...previuosState.expense, [name]: value },\n    }));\n  }\n\n  async buttonClick() {\n    const { buttonExpensesDispatch, getCurrenciesDispatch } = this.props;\n    const { expense } = this.state;\n    await getCurrenciesDispatch();\n    buttonExpensesDispatch(expense);\n    this.setState({ expense: {\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n    } });\n  }\n\n  render() {\n    const { currenciesState } = this.props;\n    const { methodOptions, tagOptions, expense } = this.state;\n    const { value, description, currency, method, tag } = expense;\n    return (\n      <Forms>\n        <Forms.Group>\n          <Forms.Label htmlFor=\"value-input\">\n            Valor:\n            <Forms.Control\n              type=\"text\"\n              data-testid=\"value-input\"\n              id=\"value-input\"\n              name=\"value\"\n              value={ value }\n              onChange={ this.handleChange }\n            />\n          </Forms.Label>\n          <Forms.Label htmlFor=\"description-input\">\n            Descrição:\n            <Forms.Control\n              type=\"text\"\n              data-testid=\"description-input\"\n              id=\"description-input\"\n              name=\"description\"\n              value={ description }\n              onChange={ this.handleChange }\n            />\n          </Forms.Label>\n          <Forms.Group>\n            <Forms.Label>\n              Moeda\n              <Forms.Control\n                as=\"select\"\n                className=\"currency-input\"\n                data-testid=\"currency-input\"\n                name=\"currency\"\n                value={ currency }\n                onChange={ this.handleChange }\n              >\n                <option selected>Selecione a sua moeda</option>\n                {currenciesState.map((c) => (\n                  <option key={ c } data-testid={ c }>\n                    {c}\n                  </option>\n                ))}\n              </Forms.Control>\n            </Forms.Label>\n            <Forms.Label>\n              Forma de Pagamento\n              <Forms.Control\n                as=\"select\"\n                className=\"method-input\"\n                data-testid=\"method-input\"\n                name=\"method\"\n                value={ method }\n                onChange={ this.handleChange }\n              >\n                <option selected>Selecione o pagamento</option>\n                {methodOptions.map((m) => (\n                  <option key={ m } data-testid={ m }>\n                    {m}\n                  </option>\n                ))}\n              </Forms.Control>\n            </Forms.Label>\n            <Forms.Label>\n              Categoria\n              <Forms.Control\n                as=\"select\"\n                className=\"tag-input\"\n                data-testid=\"tag-input\"\n                name=\"tag\"\n                value={ tag }\n                onChange={ this.handleChange }\n              >\n                <option selected>Selecione a categoria da despesa</option>\n                {tagOptions.map((t) => (\n                  <option key={ t } data-testid={ t }>\n                    {t}\n                  </option>\n                ))}\n              </Forms.Control>\n            </Forms.Label>\n          </Forms.Group>\n          <Button variant=\"success\" type=\"button\" onClick={ this.buttonClick }>\n            Adicionar despesa\n          </Button>\n        </Forms.Group>\n      </Forms>\n    );\n  }\n}\n\nForm.propTypes = {\n  getCurrenciesDispatch: PropTypes.func.isRequired,\n  buttonExpensesDispatch: PropTypes.func.isRequired,\n  currenciesState: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currenciesState: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrenciesDispatch: () => dispatch(getCurrencies()),\n  buttonExpensesDispatch: (ex) => dispatch(buttonExpenses(ex)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Table, Button } from 'react-bootstrap';\nimport { excludesRow, toggleForm } from '../actions';\n\nclass WalletTable extends React.Component {\n  filterName(currentExpense) {\n    const { expensesState } = this.props;\n    const currentCurrency = expensesState[0].exchangeRates[currentExpense.currency];\n    return currentCurrency.name;\n  }\n\n  filterExchange(currentExpense) {\n    const { expensesState } = this.props;\n    const currentCurrency = expensesState[0].exchangeRates[currentExpense.currency];\n    return parseFloat(currentCurrency.ask).toFixed(2);\n  }\n\n  convertedValue(currentExpense) {\n    const { expensesState } = this.props;\n    const currentCurrency = expensesState[0].exchangeRates[currentExpense.currency];\n    const newValue = currentCurrency.ask * currentExpense.value;\n    return parseFloat(newValue).toFixed(2);\n  }\n\n  deleteRow(id) {\n    const { deleteRowDispatch } = this.props;\n    deleteRowDispatch(id);\n  }\n\n  toggleForm(currentId) {\n    const { toggleFormDispatch } = this.props;\n    toggleFormDispatch(true, currentId);\n  }\n\n  render() {\n    const { expensesState } = this.props;\n    return (\n      <div>\n        <Table striped hover>\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            {expensesState.map((expense) => (\n              <tr key={ expense }>\n                <td>{expense.description}</td>\n                <td>{expense.tag}</td>\n                <td>{expense.method}</td>\n                <td>{`${parseFloat(expense.value)}`}</td>\n                <td>{this.filterName(expense)}</td>\n                <td>{`${this.filterExchange(expense)}`}</td>\n                <td>{this.convertedValue(expense)}</td>\n                <td>Real</td>\n                <td>\n                  <Button\n                    size=\"sm\"\n                    type=\"button\"\n                    data-testid=\"edit-btn\"\n                    onClick={ () => this.toggleForm(expense.id) }\n                  >\n                    Editar\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"danger\"\n                    type=\"button\"\n                    data-testid=\"delete-btn\"\n                    onClick={ () => this.deleteRow(expense.id) }\n                  >\n                    Excluir\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expensesState: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteRowDispatch: (excludedRow) => dispatch(excludesRow(excludedRow)),\n  toggleFormDispatch: (status, currentId) => dispatch(toggleForm(status, currentId)),\n});\n\nWalletTable.propTypes = {\n  expensesState: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]).isRequired,\n  deleteRowDispatch: PropTypes.func.isRequired,\n  toggleFormDispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletTable);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Form as Forms, Button } from 'react-bootstrap';\nimport { editExpenses, buttonExpenses, toggleForm } from '../actions';\n\nclass EditForm extends React.Component {\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n    this.buttonClick = this.buttonClick.bind(this);\n\n    this.state = {\n      methodOptions: ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'],\n      tagOptions: ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'],\n      expense: {\n        value: '',\n        description: '',\n        currency: '',\n        method: '',\n        tag: '',\n      },\n    };\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState((previuosState) => ({\n      expense: { ...previuosState.expense, [name]: value },\n    }));\n  }\n\n  async buttonClick() {\n    const { editExpensesDispatch, editId, toggleFormDispatch } = this.props;\n    const { expense } = this.state;\n    editExpensesDispatch(editId, expense);\n    this.setState({ expense: {\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n    } });\n    toggleFormDispatch(false);\n  }\n\n  render() {\n    const { currenciesState } = this.props;\n    const { methodOptions, tagOptions, expense } = this.state;\n    const { value, description, currency, method, tag } = expense;\n    return (\n      <Forms className=\"edit-form\">\n        <Forms.Group>\n          <Forms.Label htmlFor=\"value-input\">\n            Valor editado:\n            <Forms.Control\n              type=\"text\"\n              data-testid=\"value-input\"\n              id=\"value-input\"\n              name=\"value\"\n              value={ value }\n              onChange={ this.handleChange }\n            />\n          </Forms.Label>\n          <Forms.Label htmlFor=\"description-input\">\n            Descrição:\n            <Forms.Control\n              type=\"text\"\n              data-testid=\"description-input\"\n              id=\"description-input\"\n              name=\"description\"\n              value={ description }\n              onChange={ this.handleChange }\n            />\n          </Forms.Label>\n        </Forms.Group>\n        <Forms.Label>\n          <Forms.Control\n            as=\"select\"\n            className=\"currency-input\"\n            data-testid=\"currency-input\"\n            name=\"currency\"\n            value={ currency }\n            onChange={ this.handleChange }\n          >\n            <option selected>Selecione a sua moeda</option>\n            {currenciesState.map((c) => (\n              <option key={ c } data-testid={ c }>\n                {c}\n              </option>\n            ))}\n          </Forms.Control>\n        </Forms.Label>\n        <Forms.Label>\n          <Forms.Control\n            as=\"select\"\n            className=\"method-input\"\n            data-testid=\"method-input\"\n            name=\"method\"\n            value={ method }\n            onChange={ this.handleChange }\n          >\n            <option selected>Selecione o pagamento</option>\n            {methodOptions.map((m) => (\n              <option key={ m } data-testid={ m }>\n                {m}\n              </option>\n            ))}\n          </Forms.Control>\n        </Forms.Label>\n        <Forms.Label>\n          <Forms.Control\n            as=\"select\"\n            className=\"tag-input\"\n            data-testid=\"tag-input\"\n            name=\"tag\"\n            value={ tag }\n            onChange={ this.handleChange }\n          >\n            <option selected>Selecione a categoria da despesa</option>\n            {tagOptions.map((t) => (\n              <option key={ t } data-testid={ t }>\n                {t}\n              </option>\n            ))}\n          </Forms.Control>\n        </Forms.Label>\n        <Button type=\"button\" onClick={ this.buttonClick }>\n          Editar despesa\n        </Button>\n      </Forms>\n    );\n  }\n}\n\nEditForm.propTypes = {\n  editExpensesDispatch: PropTypes.func.isRequired,\n  currenciesState: PropTypes.func.isRequired,\n  toggleFormDispatch: PropTypes.func.isRequired,\n  editId: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currenciesState: state.wallet.currencies,\n  editId: state.wallet.editingExpense,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  buttonExpensesDispatch: (ex) => dispatch(buttonExpenses(ex)),\n  editExpensesDispatch: (expense, editId) => dispatch(editExpenses(expense, editId)),\n  toggleFormDispatch: (status, currentId) => dispatch(toggleForm(status, currentId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport logo from '../img/logo.webp';\nimport Form from '../components/Form';\nimport WalletTable from '../components/WalletTable';\nimport EditForm from '../components/EditForm';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currency: 'BRL',\n    };\n  }\n\n  totalValue() {\n    const { expensesState } = this.props;\n    const total = expensesState.reduce(\n      (acc, cur) => acc\n        + parseFloat(cur.value) * parseFloat(cur.exchangeRates[cur.currency].ask),\n      0,\n    );\n    return total;\n  }\n\n  render() {\n    const { currency } = this.state;\n    const { email, typeForm } = this.props;\n    console.log(typeForm);\n    return (\n      <div>\n        <div\n          className=\"header-wallet\"\n          style={ { color: 'white', fontFamily: 'Poppins', padding: '32px' } }\n        >\n          TrybeWallet\n          <header>\n            <img src={ logo } alt=\"Logo Trybe\" className=\"logo-header\" />\n            <div>\n              <p data-testid=\"email-field\">{email}</p>\n              <p>\n                Despesa Total:\n                <span data-testid=\"header-currency-field\">{currency}</span>\n                <span data-testid=\"total-field\">{this.totalValue()}</span>\n              </p>\n            </div>\n          </header>\n          {typeForm ? <EditForm /> : <Form />}\n        </div>\n        <div>\n          <WalletTable />\n        </div>\n      </div>\n    );\n  }\n}\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  typeForm: PropTypes.bool.isRequired,\n  expensesState: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expensesState: state.wallet.expenses,\n  typeForm: state.wallet.toggleForm,\n});\n\nexport default connect(mapStateToProps, null)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\r\nimport { CLICK_UPDATE_EMAIL_VALUE } from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n  email: '',\r\n};\r\n\r\nconst user = (state = initialState, action) => {\r\n  switch (action.type) {\r\n  case CLICK_UPDATE_EMAIL_VALUE:\r\n    return { ...state, email: action.payload };\r\n\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default user;\r\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\r\nconst initialState = {\r\n  currencies: [],\r\n  expenses: [],\r\n  nextId: 0,\r\n  rates: {},\r\n  toggleForm: false,\r\n};\r\n\r\nconst wallet = (state = initialState, action) => {\r\n  switch (action.type) {\r\n  case 'CURRENCY_UPDATE_VALUE':\r\n    return { ...state, currencies: action.currencies, rates: action.rates };\r\n  case 'EXPENSES_ADD_VALUE':\r\n    action.expense.id = state.nextId;\r\n    action.expense.exchangeRates = state.rates;\r\n    return {\r\n      ...state,\r\n      expenses: [...state.expenses, action.expense],\r\n      nextId: state.nextId + 1,\r\n    };\r\n  case 'EXPENSES_DELETE_VALUE':\r\n    return {\r\n      ...state,\r\n      expenses: state.expenses.filter((expense) => expense.id !== action.id),\r\n    };\r\n  case 'TOGGLE_FORMS':\r\n    return {\r\n      ...state,\r\n      toggleForm: action.edit,\r\n      editingExpense: action.currentId,\r\n    };\r\n  case 'EXPENSES_UPDATE_VALUE': {\r\n    const index = action.idExpense;\r\n    const currentExpenses = [...state.expenses];\r\n    currentExpenses[index] = { ...action.editExpense,\r\n      exchangeRates: state.expenses[index].exchangeRates,\r\n      id: state.expenses[index].id };\r\n    return {\r\n      ...state,\r\n      expenses: [...currentExpenses],\r\n    };\r\n  }\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default wallet;\r\n","import { combineReducers } from 'redux';\r\nimport user from './user';\r\nimport wallet from './wallet';\r\n// Configure os seus reducers.\r\n\r\nconst reducers = combineReducers({\r\n  user,\r\n  wallet,\r\n});\r\n\r\nexport default reducers;\r\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from '../reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(\r\n  applyMiddleware(thunk),\r\n));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport './App.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}